import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import PassiveAggressiveClassifier
from sklearn.metrics import classification_report, confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt

!wget https://storage.yandexcloud.net/academy.ai/practica/fake_news.csv

# Загрузка данных
df = pd.read_csv('fake_news.csv')
df.tail()
# Обработка пропущенных значений (если есть)
#df.dropna(inplace=True)

# Разделение данных на признаки (текст) и целевую переменную (REAL/FAKE)
X = df['text']
y = df['label']

# Разделение данных на обучающую и тестовую выборки
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=7)

# Применение TfidfVectorizer для преобразования текстовых данных в числовые признаки
vectorizer = TfidfVectorizer(stop_words='english')  # Используем стоп-слова
X_train_vec = vectorizer.fit_transform(X_train)
X_test_vec = vectorizer.transform(X_test)

# Обучение модели PassiveAggressiveClassifier
pac = PassiveAggressiveClassifier(max_iter=50, random_state=7)
pac.fit(X_train_vec, y_train)

# Предсказание на тестовой выборке
y_pred = pac.predict(X_test_vec)

# Оценка модели
print(classification_report(y_test, y_pred))

# Матрица ошибок
cm = confusion_matrix(y_test, y_pred, labels=['REAL', 'FAKE'])

# Визуализация матрицы ошибок
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',
            xticklabels=['REAL', 'FAKE'], yticklabels=['REAL', 'FAKE'])
plt.xlabel('Предсказанное значение')
plt.ylabel('Истинное значение')
plt.title('Матрица ошибок')
plt.show()
